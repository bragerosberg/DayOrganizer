{"version":3,"sources":["components/Tasks/TodoCard.jsx","components/Tasks/TodoList.jsx","components/Weather/DailyForecast.jsx","components/Weather/Weather.jsx","components/Board/Board.jsx","components/App.js","serviceWorker.js","index.js"],"names":["TodoCard","props","toggleTask","setState","solved","state","this","task","taskInput","className","id","onClick","bind","deleteTask","React","Component","TodoList","handleSubmit","event","preventDefault","appendTask","uuid","clearInputField","onSubmit","type","value","placeholder","onChange","setTaskInput","deleteAllTodos","tasks","map","key","DailyForecast","weather","weather_state_abbr","weather_state_name","applicable_date","min_temp","max_temp","wind_speed","imgUri","predictability","date","Date","day","getDate","month","getMonth","src","alt","Math","round","WEATHER_QUERY","gql","Weather","query","loading","error","data","console","log","client","ApolloClient","uri","Board","App","componentDidMount","attemptStoredTodos","componentDidUpdate","storeTodo","localStorage","setItem","JSON","stringify","getStoredTodo","getItem","parse","handleLoad","res","e","filter","todo","target","clear","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.3837415c.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Tasks.css'\r\nclass TodoCard extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    \r\n    this.state = {\r\n      solved: false,\r\n    };\r\n  }\r\n\r\n  toggleTask = () => {\r\n    this.setState({\r\n      solved: !this.state.solved,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      this.props.task.taskInput === '' ? null :\r\n      this.state.solved ? (\r\n        <li className=\"todo__card__done card\" id={this.props.task.id}\r\n          onClick={this.toggleTask.bind(this)}>\r\n            {this.props.task.taskInput}\r\n          <button className=\"todo__card__done--button btn-danger\"\r\n          id={this.props.task.id}\r\n          onClick={this.props.deleteTask}>X</button>\r\n        </li>\r\n      ) : (\r\n        <li className=\"todo__card__task card\" id={this.props.task.id}\r\n        onClick={this.toggleTask.bind(this)}>\r\n          {this.props.task.taskInput}\r\n        </li>\r\n      )\r\n    );\r\n  }\r\n}\r\n\r\nexport default TodoCard;\r\n","import React from 'react';\r\nimport TodoCard from './TodoCard';\r\nimport { uuid } from 'uuidv4';\r\nimport './Tasks.css';\r\n\r\n\r\nconst TodoList = (props) => {\r\n  const handleChange = (event) => {\r\n    props.setTaskInput(event);\r\n  };\r\n\r\n  const handleSubmit = event => {\r\n    event.preventDefault();\r\n    props.appendTask({\r\n      taskInput: props.taskInput,\r\n      id: uuid(),\r\n    });\r\n    props.clearInputField();\r\n  };\r\n\r\n\r\n  return (\r\n    <article>\r\n      <section className=\"navbar todo__form\">\r\n        <form onSubmit={handleSubmit}>\r\n          <input className=\"todo__form__input\" type=\"text\" value={props.taskInput} placeholder=\"Please write your task\" onChange={handleChange} />\r\n          <button className=\"todo__form__button\" onClick={handleSubmit}>Add Task</button>\r\n        </form>\r\n        <button className=\"todo__form__delete \" onClick={props.deleteAllTodos}>Delete All Tasks</button>\r\n      </section>\r\n\r\n      <section className=\"todo__list\">\r\n        <div className=\"todo__list__cards\">\r\n          {props.tasks.map(task => (\r\n              <TodoCard key={task.id} task={task} toggleTask={props.toggleTask} deleteTask={props.deleteTask}/>\r\n          ))}\r\n        </div>\r\n      </section>\r\n    </article>\r\n  );\r\n}\r\n\r\nexport default TodoList;\r\n","import React from 'react';\r\nimport './Weather.css';\r\n\r\nconst DailyForecast = ({ weather: {\r\n  weather_state_name,\r\n  weather_state_abbr,\r\n  applicable_date,\r\n  min_temp,\r\n  max_temp,\r\n  wind_speed,\r\n  predictability\r\n}}) => {\r\n  const imgUri = `https://www.metaweather.com/static/img/weather/${weather_state_abbr}.svg`;\r\n  const date = new Date(applicable_date);\r\n  const day = date.getDate();\r\n  const month = date.getMonth() + 1; \r\n  \r\n  return(\r\n    <main className=\"weather__day\">\r\n      <p className=\"weather__date\">{day}/{month}</p>\r\n      {<img className=\"weather__img\"src={imgUri} alt=\"weather\"/>}\r\n      <p>{Math.round(min_temp * 10)/ 10}°C - {Math.round(max_temp * 10)/ 10}°C{Math.round(wind_speed * 10)/ 10} m/s</p>\r\n    </main>\r\n  )\r\n}\r\n\r\nexport default DailyForecast;","import React, { Fragment } from 'react';\r\nimport gql from 'graphql-tag';\r\nimport { Query } from 'react-apollo';\r\n\r\nimport './Weather.css';\r\nimport '../../styles/loader.css';\r\nimport DailyForecast from './DailyForecast';\r\n\r\nconst WEATHER_QUERY = gql`\r\n  query WeatherQuery {\r\n    weather {\r\n      id\r\n      weather_state_name\r\n      weather_state_abbr\r\n      applicable_date\r\n      min_temp\r\n      max_temp\r\n      wind_speed\r\n      predictability\r\n    }\r\n  }\r\n`;\r\n\r\nconst Weather = (props) => {\r\n  return(\r\n    <Fragment>\r\n      <main>\r\n        <Query query={WEATHER_QUERY}>\r\n          {\r\n            ({ loading, error, data }) => {\r\n              if (loading) return (\r\n              <section className=\"weather__loader\">\r\n                <div className=\"lds-default\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div>\r\n              </section>\r\n              )\r\n              if (error) console.log(error);\r\n              console.log(data);\r\n\r\n              return <Fragment> \r\n                <ul className=\"weather__day__wrapper card text-black\">\r\n                  { data.weather.map(weather => (\r\n                      <li className=\"weather__day--item card\">\r\n                        <DailyForecast key={weather.id} weather={weather}/>\r\n                      </li>\r\n                    ))\r\n                  }\r\n                </ul>\r\n              </Fragment>\r\n            }\r\n          }\r\n        </Query>\r\n      </main>\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default Weather;","import React from 'react';\r\nimport ApolloClient from 'apollo-boost';\r\nimport { ApolloProvider } from 'react-apollo';\r\n\r\nimport TodoList from '../Tasks/TodoList';\r\nimport Weather from '../Weather/Weather';\r\n\r\n\r\nconst client = new ApolloClient({\r\n  uri: '/graphql'\r\n});\r\n\r\n\r\nconst Board = (props) => {\r\n  return(\r\n    <main>\r\n        <ApolloProvider client={client}>\r\n          <Weather />\r\n        </ApolloProvider>\r\n        <TodoList tasks={props.tasks}\r\n        taskInput={props.taskInput}\r\n        solved={props.solved}\r\n        deleteTask={props.deleteTask}\r\n        appendTask={props.appendTask}\r\n        setTaskInput={props.setTaskInput}\r\n        toggleTask={props.toggleTask}\r\n        clearInputField={props.clearInputField}\r\n        deleteAllTodos={props.deleteAllTodos}\r\n        />\r\n\r\n    </main>\r\n  )\r\n}\r\n\r\nexport default Board;","import React from 'react';\r\nimport Board from './Board/Board';\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      tasks: [],\r\n      taskInput: '',\r\n    };\r\n  }\r\n  componentDidMount = () => {\r\n    this.attemptStoredTodos();\r\n  }\r\n\r\n  componentDidUpdate = () => {\r\n    this.storeTodo(this.state.tasks);\r\n  }\r\n\r\n  storeTodo = (tasks) => { localStorage.setItem('todoStorage', JSON.stringify(tasks)) }\r\n\r\n  attemptStoredTodos = () => {\r\n    const getStoredTodo = localStorage.getItem('todoStorage');\r\n    if (getStoredTodo) this.setState({ tasks : JSON.parse(getStoredTodo)});\r\n  }\r\n\r\n  handleLoad = () => {\r\n    const res = localStorage.getItem('todoStorage');\r\n    this.setState({ tasks: res });\r\n  };\r\n\r\n  appendTask = task => {\r\n    this.setState({ tasks: [task, ...this.state.tasks] });\r\n  };\r\n\r\n  deleteTask = (e) => {\r\n    let { tasks } = this.state;\r\n    tasks = tasks.filter(todo => todo.id !== e.target.id);\r\n    this.setState({ tasks });\r\n  };\r\n\r\n  toggleTask = (e) => {\r\n    let { tasks } = this.state;\r\n    tasks.map(task => task.id = e.target.id ? task.solved = !task.solved : task)\r\n    this.setState({ tasks });\r\n  };\r\n\r\n  setTaskInput = (e) => {\r\n    this.setState({ taskInput: e.target.value });\r\n  };\r\n\r\n  clearInputField = () => {\r\n    this.setState({ taskInput: '' });\r\n  };\r\n\r\n  deleteAllTodos = () => {\r\n    this.setState({ tasks: [] });\r\n    localStorage.clear();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <main className=\"todo__app\">\r\n        <Board tasks={this.state.tasks}\r\n        taskInput={this.state.taskInput}\r\n        solved={this.state.solved}\r\n        deleteTask={this.deleteTask}\r\n        appendTask={this.appendTask}\r\n        setTaskInput={this.setTaskInput}\r\n        toggleTask={this.toggleTask}\r\n        clearInputField={this.clearInputField}\r\n        deleteAllTodos={this.deleteAllTodos}\r\n        />\r\n      </main>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}